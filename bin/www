#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../server/app');
var debug = require('debug')('twikki:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);

var TwitterStream = require('node-tweet-stream');

var clientStream = new TwitterStream({
	consumer_key: 'QwdAUzSbGjv1C5sI8ZTuIr05x',
	consumer_secret: 'Ay45eQdOxNE19SNCetm9aUlHXpsjrMUXQZNSAij3CE35Koo9Dw',
	token: '282461932-GdIiyIInE8u2Ms0LNjgcDR7MYN8X0D21P6a5Hh1u',
	token_secret: '9gWKusXTlWHsvjw2Ao4wzuzZpb2GftROC6wgsIUBCP98D'
});

clientStream.on('tweet', function (tweet) {
	console.log("tweet received!!");
	io.emit('tweet', tweet);
});

clientStream.on('error', function (err) {
	console.log('Oh no')
});

clientStream.track('nodejs');
//clientStream.track('pizza');
clientStream.track('tacos');

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
